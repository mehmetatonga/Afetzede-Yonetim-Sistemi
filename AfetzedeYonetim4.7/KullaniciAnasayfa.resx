<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0oBGAM51
        NQPRfEAD0Hs+Cs94OgTPeDoFznMzCc93OQXPdzkEz3c5Bc92OAPQeTsD0X1BCNB7PgbRfEAI0Hs+Bc93
        OATOczMIznQ1Bs94OgPQeTsG0Ho9AdF7PwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANKB
        RwD28doAznU3Ts94OlXPdzl3z3g6ec93OYLPdzl/0Ho+S893OE7Pdzly0Hg7dNB6PUbQeTxv0Ho8cdB5
        PHrPdzlYz3c5Ts93OXjPdjhxz3c5dNB5O2vQez4N0XxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADPdjgAzXMzAtF8QA7QeTtj0Ho9Z9B5O4rQeTtw0Hg7cdB5PHvQej1u0Hk7eNB5PHfPdzlt0Ho9RdB5
        O2jQez5u0Hk7fM94OmjPeDtx0Hk8dc93OWfPdzln0Hs/ctB5PBjOdTUB0Hs+AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANB5PADPeTsPz3c5ftB4O3vPeDpsz3g7jtB6Pk7PeDtVznU2fc93OYTQeDuFz3g6h894
        OnrQez460Hk8eM93OYnPdTaUz3c6gs94OofPeDqFz3g6VM93OErPeDp+z3g6etOCSA3TgkgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA0oBGANKARQLQeDpV0Ho9VdB6PWzQej1q0Ho9aNF7P17PeDptz3g5bdB6
        PWfQeDpl0Hk8aNF9QjrRez9s0Hg7Y894OnjQeTtU0Hg7WtB5O2bQeDtM0Ho8R9B6PGTQeTxp04JIC9OC
        SQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1YlTANiPXAHdoHQB145bAtiPXALViFED1YdQA9WH
        UQL7yqgB355xBdGMWgvKfkcTzHxDG9GFTxXw0LoC5JxrAdiKUwDZkmEB2ZNiAdWHUAHYkV8B2pVkAdiR
        XgLUhk4A1YdQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/+
        +QDGcjUA1Y5bB8JwNCa7ZCRCuGAeRrdfHUC3Xhw/uF8dRbtkJELDcTUm1Y9cB8ZzNgD//PYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD42MMAozYAAMt/RxO8ZiZFtlwZPLNXEhexUw4GqkQGAalHBwGxUw8Gs1cTGLZdGjy8ZiZFy35GE6c8
        AAD32sYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA+MipAL5fGQDQgkkUwWUhR79aDx1BWFAAABZzAAseQQANI0cAAAAAAAAAAADqWQAARmNOAMBZ
        Dh6+ZCJJy39IFLdeGwD5yqsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADWkWAA6Z5pB6tiLFNrUDxsS05RTUpKS0xHR0h5RkZHmkNDRHlGRkdYRkZHiEdH
        SHROTk9XUVNVXXdSN1G+ZiVF2JVkCNaQXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA25prAJwxAADGczYqn1gjSElKS7xNTU3/T05P+ktLTP5LS0z6TU1O0EtL
        TOlJSEn/S0tL/k5OTv1RUVL/TU1Odb1dFTbDcjYqnjUAANuaawAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcm20A4qZ8BLtmJkXBWAkRUFFTU1BQUOpTWk//VV5S/1JW
        T/dgYGGndoR5tnB+d/xTWlT/R0ZH/1BQUP1LTE1gzlkCELxmJkXjp30F3JpsAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANKMWQDMgUoQuGAfRMQnAAJ/mnMQk7WRo5/E
        oP6myKv/dYhx8mFjZN6jwLXwtNzD/5y6qPxlb2WhSklLVklJSiH/VAABuWEfRc2CTBDTjVoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxXU6AMV1Oha2XRo7u864ALDb
        tlC639L0yOba/8PjzPV5jnqnUlVRnaPGruK639L/v+Hh/7zh2Lil3pAYqt6gAMVvMAC2Wxg8xXM3F8Vz
        OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEdDkAxHQ6FrZc
        GTn/z/8Aut7UmcTi8P/G5OL/veDT1JzShxUWlwABstu9m7/g4P/F4vH/xOLw/7TcxIohpQACtIE1ALZb
        GDrEczcWxHI2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCI
        VADKfkcSuF8eQ5CtNAi+4N23xuP1/8bj9P+839mhb8IEA67asQCr2aowut7U2sXj8f/H4/b/u9/Y5HbG
        K25tswETuV8fQst/SRLRiVUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA3JxvANydcAa8ZCVFmZMpILfezMXG4/P/weHmy7Hbui6939oAk9BwAABrAACx27s4vd/bnsDh
        5OeZ0oH+b8Ma2H6oEz++YCVC3JxuBtuabQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADdnW8AbwAAAMhoNiyMmRl4fMg68ZLPcfuW0Xdtn9SUAH7IRQAAAAAAAAAAAKPV
        igDq8P8BhctObnfFK91zxiNbtF0ZMsFuMi57AAAA3JxuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRilYA4oVlCqSBIGZ5sRWFbMMSom3CEk5pwA0ApNhpAAAA
        AAAAAAAAKqsAAHLDGwBvwhgTdckoPKlrGBq7YyRG04xZC9GIVQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO66lgCbEAAAznZFGr1dIUaoaBMZXOMeA3HE
        HAAAAAAAAAAAAAAAAAAAAAAA4RICAK5jGAC4ThETuWEgSch6QRujPgAA8r6cAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDGqAAAAAAAx3lAHLtj
        JEq2WxguslURDKZDBwGsTQsArE4MAKZFCAGyVhEMtVsYLrtkI0rHeUEcAAAAAPDHqgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPbW
        vwCDAAAAz4dSDcBtMTS6YyNJuGAeQbZcGTi2XBg4uGAeQbpjIkjAbTA0z4ZRDYIAAAD318EAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADuupcA+9G1ANWPXgnJe0IYw3AzIsNvMiHJekEY1I5cCfzStwDtuZUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////wAAB/8AAAf8AAAD/AAAA/wAAAP+AAIH//g
        B///wAP//4/x//8AAP//AAD//gAAf/4AAH/+QAZ//kACf/4BAH/+A4B//wfA//8H4P//h/H//8GD///g
        B///+B////////////////////////////8=
</value>
  </data>
</root>